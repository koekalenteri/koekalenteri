name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      e2e: ${{ steps.filter.outputs.e2e }}
      sse-worker: ${{ steps.filter.outputs.sse-worker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history

      - name: Get base commit
        id: base-commit
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, output empty string as base is ignored anyway
            echo "sha=" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For direct pushes, use the "before" SHA from the push event
            BEFORE_SHA="${{ github.event.before }}"
            if [[ -z "$BEFORE_SHA" || "$BEFORE_SHA" == "0000000000000000000000000000000000000000" ]]; then
              # If this is a new branch, compare with the default branch
              echo "sha=$(git merge-base origin/${{ github.event.repository.default_branch }} ${{ github.sha }})" >> $GITHUB_OUTPUT
            else
              echo "sha=$BEFORE_SHA" >> $GITHUB_OUTPUT
            fi
          else
            # For other events (like merge_group)
            echo "sha=$(git merge-base origin/main ${{ github.sha }})" >> $GITHUB_OUTPUT
          fi


      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ steps.base-commit.outputs.sha }}
          filters: |
            backend:
              - '.github/**'
              - 'scripts/**'
              - 'src/lambda/**'
              - 'src/i18n/**'
              - 'src/lib/**'
              - 'src/types/**'
              - 'package-lock.json'
              - 'package.json'
              - 'tsconfig.json'
              - 'template.yaml'
              - 'Makefile'
            frontend:
              - '.github/**'
              - 'scripts/**'
              - 'public/**'
              - 'src/!(lambda)/**'
              - 'package-lock.json'
              - 'package.json'
              - 'tsconfig.json'
            e2e:
              - 'e2e/**'
              - 'playwright.config.ts'
            sse-worker:
              - '.github/**'
              - 'cf/sse-worker/**'

      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  backend:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.backend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build-backend
      - name: Test
        run: npm run test-backend -- --coverage
      - name: Cache layer node_modules
        id: cache-layer
        uses: actions/cache@v4
        with:
          path: dist/layer/nodejs/node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install layer packages
        if: steps.cache-layer.outputs.cache-hit != 'true'
        working-directory: dist/layer/nodejs
        run: npm ci --imit=dev
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: dist/
      - name: Rename coverage
        run: |
          mkdir -p coverage
          mv src/lambda/coverage/lcov.info coverage/lcov.info
      - name: Cache coverage report
        uses: actions/cache/save@v4
        with:
          path: coverage/lcov.info
          key: ${{ github.ref_name }}-backend-coverage-${{ github.run_id }}

  frontend:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint
        if: ${{ needs.setup.outputs.backend != 'true' }}
        run: npm run lint
      - name: Build
        run: npm run build-frontend
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: build/

  frontend-test:
    runs-on: ubuntu-latest
    needs: [setup, frontend]
    if: ${{ needs.setup.outputs.frontend == 'true' }}
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Restore node_modules
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build
      - name: Test
        run: npm run test-frontend -- --coverage --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      - name: Rename coverage
        run: mv coverage/lcov.info coverage/lcov${{ matrix.shard }}.info
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ matrix.shard }}
          path: coverage/lcov${{ matrix.shard }}.info

  frontend-coverage:
    runs-on: ubuntu-latest
    needs: [frontend-test]
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: frontend-coverage-*
          path: coverage
          merge-multiple: true
      - name: Cache frotnend coverage reports
        uses: actions/cache/save@v4
        with:
          path: coverage
          key: ${{ github.ref_name }}-frontend-coverage-${{ github.run_id }}

  playwright:
    runs-on: ubuntu-latest
    needs: [setup, frontend]
    if: ${{ needs.setup.outputs.e2e == 'true' || needs.setup.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Restore node_modules
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install packages
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build
      - name: Run Playwright tests
        run: npm run test-e2e
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [setup,backend,frontend-test,playwright]
    if: ${{ always() && !failure() && !cancelled() && github.event_name == 'push' && needs.setup.outputs.backend == 'true' }}
    concurrency:
      group: deploy-backend-${{ github.ref }}
      cancel-in-progress: true
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: dist
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: SAM Validate
        run: |
         sam validate --lint
      - name: Configure variables
        shell: bash
        run: |
          echo "branch=main" >> $GITHUB_ENV
          echo "environment=koekalenteri-dev" >> $GITHUB_ENV
          echo "stage=dev" >> $GITHUB_ENV
      - name: Shared Node.js layer
        run: |
          mkdir -p layer/nodejs/lambda
          mv node_modules layer/nodejs/
          mv dist/i18n layer/nodejs/
          mv dist/lib layer/nodejs/
          mv -t layer/nodejs/lambda dist/lambda/lib dist/lambda/types dist/lambda/utils
          cp dist/lambda/config.mjs layer/nodejs/lambda
      - name: SAM Build
        run: |
          cp Makefile dist/
          sam build --base-dir dist
      - name: SAM Deploy
        run: |
          # Create S3 Bucket to store code
          aws s3api head-bucket --bucket "${{ env.environment }}" 2>/dev/null \
            || aws s3 mb s3://${{ env.environment }}
          # Run SAM Deploy
          sam deploy --template-file .aws-sam/build/template.yaml \
            --stack-name ${{ env.environment }} \
            --s3-bucket ${{ env.environment }} \
            --parameter-overrides \
              'ParameterKey=StageNameParam,ParameterValue=${{ env.stage }} \
              ParameterKey=Repository,ParameterValue=https://github.com/${{ github.repository }} \
              ParameterKey=OauthToken,ParameterValue=${{ secrets.AWS_OAUTH_TOKEN }} \
              ParameterKey=GoogleClientId,ParameterValue=${{ secrets.GOOGLE_CLIENT_ID }} \
              ParameterKey=GoogleClientSecret,ParameterValue=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              ParameterKey=CustomDomain,ParameterValue=${{ secrets.CUSTOM_DOMAIN }} \
              ParameterKey=Branch,ParameterValue=${{ env.branch }}' \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-confirm-changeset --no-fail-on-empty-changeset

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [setup,frontend-test,playwright,deploy-backend]
    if: ${{ always() && !failure() && !cancelled() && github.event_name == 'push' && needs.setup.outputs.frontend == 'true' }}
    concurrency:
      group: deploy-frontend-${{ github.ref }}
      cancel-in-progress: true
    environment: dev
    steps:
      - name: Trigger deployment
        run: curl -X POST -d {} "${{ secrets.DEPLOY_TRIGGER_HOOK }}" -H "Content-Type:application/json"

  sonar:
    runs-on: ubuntu-latest
    needs: [backend,frontend-coverage]
    if: ${{ always() && !failure() && !cancelled() }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis (SonarCloud)
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Restore node_modules
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Download frontend coverage
        uses: actions/cache/restore@v4
        with:
          path: coverage
          key: ${{ github.ref_name }}-frontend-coverage
          restore-keys: ${{ github.ref_name }}-frontend-coverage
      - name: Download backend coverage
        uses: actions/cache/restore@v4
        with:
          path: coverage/lcov.info
          key: ${{ github.ref_name }}-backend-coverage
          restore-keys: ${{ github.ref_name }}-backend-coverage
      - name: Read frontend version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Set version
        run: echo -e "\nsonar.projectVersion=${{ steps.package-version.outputs.current-version}}" >> sonar-project.properties
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sse-worker:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.sse-worker == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: cf/sse-worker/package-lock.json
      - name: Install dependencies
        working-directory: cf/sse-worker
        run: npm ci
      - name: Run tests
        working-directory: cf/sse-worker
        run: npm test
      - name: Debug
        run: |
          echo "SSE Worker output: '${{ needs.setup.outputs.sse-worker }}'"

  deploy-sse-worker:
    runs-on: ubuntu-latest
    needs: [setup, sse-worker]
    if: ${{ always() && !failure() && !cancelled() && github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.setup.outputs.sse-worker == 'true' }}
    concurrency:
      group: deploy-sse-worker-${{ github.ref }}
      cancel-in-progress: true
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: cf/sse-worker/package-lock.json
      - name: Install dependencies
        working-directory: cf/sse-worker
        run: npm ci
      - name: Deploy to Cloudflare
        working-directory: cf/sse-worker
        run: npm run deploy
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
