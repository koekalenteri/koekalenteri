name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # fetch also previous commit

      # workaround for https://github.com/dorny/paths-filter/issues/240
      - id: previous-sha
        run: 'echo "sha=$(git rev-list -n 1 ${{ github.ref }}^)" >> $GITHUB_OUTPUT'

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: "${{ steps.previous-sha.outputs.sha }}"
          filters: |
            backend:
              - '.github/**'
              - 'scripts/**'
              - 'src/lambda/**'
              - 'src/i18n/**'
              - 'src/lib/**'
              - 'src/types/**'
              - 'package-lock.json'
              - 'package.json'
              - 'tsconfig.json'
              - 'template.yaml'
              - 'Makefile'
            frontend:
              - '.github/**'
              - 'scripts/**'
              - 'src/!(lambda)/**'
              - 'package-lock.json'
              - 'package.json'
              - 'tsconfig.json'

      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  backend:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.backend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build-backend
      - name: Test
        run: npm run test-backend -- --coverage
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: dist/
      - name: Rename coverage
        run: |
          mkdir -p coverage
          mv src/lambda/coverage/lcov.info coverage/lcov.info
      - name: Cache coverage report
        uses: actions/cache/save@v4
        with:
          path: coverage/lcov.info
          key: ${{ github.ref_name }}-backend-coverage-${{ github.run_id }}

  frontend:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint
        if: ${{ needs.setup.outputs.backend != 'true' }}
        run: npm run lint
      - name: Build
        run: npm run build-frontend
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: build/

  frontend-test:
    runs-on: ubuntu-latest
    needs: [setup, frontend]
    if: ${{ needs.setup.outputs.frontend == 'true' }}
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Restore node_modules
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build
      - name: Test
        run: npm run test-frontend -- --coverage --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      - name: Rename coverage
        run: mv coverage/lcov.info coverage/lcov${{ matrix.shard }}.info
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ matrix.shard }}
          path: coverage/lcov${{ matrix.shard }}.info

  frontend-coverage:
    runs-on: ubuntu-latest
    needs: [frontend-test]
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: frontend-coverage-*
          path: coverage
          merge-multiple: true
      - name: Cache frotnend coverage reports
        uses: actions/cache/save@v4
        with:
          path: coverage
          key: ${{ github.ref_name }}-frontend-coverage-${{ github.run_id }}

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [setup,backend,frontend-test]
    if: ${{ always() && !failure() && !cancelled() && github.event_name == 'push' && needs.setup.outputs.backend == 'true' }}
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: dist
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: SAM Validate
        continue-on-error: true # allow temporarily, because it fails on warnings
        run: |
         sam validate --lint
      - name: Configure variables
        shell: bash
        run: |
          echo "branch=main" >> $GITHUB_ENV
          echo "environment=koekalenteri-dev" >> $GITHUB_ENV
          echo "stage=dev" >> $GITHUB_ENV
      - name: Shared Node.js layer
        run: |
          npm un aws-amplify @aws-amplify/ui-react @mui/icons-material @mui/material @mui/x-data-grid @mui/x-date-pickers aws-rum-web identity-obj-proxy material-ui-confirm mui-tel-input notistack react react-dnd react-dnd-html5-backend react-dom react-i18next react-router recoil
          npm ci --omit=dev
          mkdir -p layer/nodejs/lambda
          mv node_modules layer/nodejs/
          mv dist/i18n layer/nodejs/
          mv dist/lib layer/nodejs/
          mv -t layer/nodejs/lambda dist/lambda/lib dist/lambda/types dist/lambda/utils
          cp dist/lambda/config.mjs layer/nodejs/lambda
      - name: SAM Build
        run: |
          cp Makefile dist/
          sam build --base-dir dist
      - name: SAM Deploy
        run: |
          # Create S3 Bucket to store code
          aws s3api head-bucket --bucket "${{ env.environment }}" 2>/dev/null \
            || aws s3 mb s3://${{ env.environment }}
          # Run SAM Deploy
          sam deploy --template-file .aws-sam/build/template.yaml \
            --stack-name ${{ env.environment }} \
            --s3-bucket ${{ env.environment }} \
            --parameter-overrides \
              'ParameterKey=StageNameParam,ParameterValue=${{ env.stage }} \
              ParameterKey=Repository,ParameterValue=https://github.com/${{ github.repository }} \
              ParameterKey=OauthToken,ParameterValue=${{ secrets.AWS_OAUTH_TOKEN }} \
              ParameterKey=GoogleClientId,ParameterValue=${{ secrets.GOOGLE_CLIENT_ID }} \
              ParameterKey=GoogleClientSecret,ParameterValue=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              ParameterKey=CustomDomain,ParameterValue=${{ secrets.CUSTOM_DOMAIN }} \
              ParameterKey=Branch,ParameterValue=${{ env.branch }}' \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-confirm-changeset --no-fail-on-empty-changeset

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [setup,frontend-test,deploy-backend]
    if: ${{ always() && !failure() && !cancelled() && github.event_name == 'push' && needs.setup.outputs.frontend == 'true' }}
    environment: dev
    steps:
      - name: Trigger deployment
        run: curl -X POST -d {} "${{ secrets.DEPLOY_TRIGGER_HOOK }}" -H "Content-Type:application/json"

  sonar:
    runs-on: ubuntu-latest
    needs: [backend,frontend-coverage]
    # dependabot etc pull request can't have the token, so lets run only on merges.
    if: ${{ always() && !failure() && !cancelled() && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis (SonarCloud)
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Restore node_modules
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Download frontend coverage
        uses: actions/cache/restore@v4
        with:
          path: coverage
          key: ${{ github.ref_name }}-frontend-coverage
          restore-keys: ${{ github.ref_name }}-frontend-coverage
      - name: Download backend coverage
        uses: actions/cache/restore@v4
        with:
          path: coverage/lcov.info
          key: ${{ github.ref_name }}-backend-coverage
          restore-keys: ${{ github.ref_name }}-backend-coverage
      - name: Read frontend version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Set version
        run: echo -e "\nsonar.projectVersion=${{ steps.package-version.outputs.current-version}}" >> sonar-project.properties
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
