name: Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.setEnv.outputs.env }}
    steps:
      - id: setEnv
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "env=test" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            echo "env=test" >> $GITHUB_OUTPUT
          else
            echo "env=prod" >> $GITHUB_OUTPUT
          fi

  deploy-backend:
    needs: [setup]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.env }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build
        run: npm run build-backend
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Configure variables
        shell: bash
        run: |
          echo "branch=main" >> $GITHUB_ENV
          echo "environment=koekalenteri-${{ needs.setup.outputs.env }}" >> $GITHUB_ENV
          echo "stage=${{ needs.setup.outputs.env }}" >> $GITHUB_ENV
      - name: SAM Build
        run: |
          sam build --base-dir dist -t dist/template.yaml
      - name: SAM Deploy
        run: |
          # Create S3 Bucket to store code
          aws s3api head-bucket --bucket "${{ env.environment }}" 2>/dev/null \
            || aws s3 mb s3://${{ env.environment }}
          # Run SAM Deploy
          sam deploy --template-file .aws-sam/build/template.yaml \
            --stack-name ${{ env.environment }} \
            --s3-bucket ${{ env.environment }} \
            --parameter-overrides \
              'ParameterKey=StageNameParam,ParameterValue=${{ env.stage }} \
              ParameterKey=Repository,ParameterValue=https://github.com/${{ github.repository }} \
              ParameterKey=OauthToken,ParameterValue=${{ secrets.AWS_OAUTH_TOKEN }} \
              ParameterKey=GoogleClientId,ParameterValue=${{ secrets.GOOGLE_CLIENT_ID }} \
              ParameterKey=GoogleClientSecret,ParameterValue=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              ParameterKey=CustomDomain,ParameterValue=${{ secrets.CUSTOM_DOMAIN }} \
              ParameterKey=Branch,ParameterValue=${{ env.branch }}' \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-confirm-changeset --no-fail-on-empty-changeset

  deploy-frontend:
    needs: [setup, deploy-backend]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy to amplify
        env:
          APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          ENV: ${{ needs.setup.outputs.env }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REF: ${{ github.ref_name }}
        run: |
          set -e

          # Configure Git
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
            BRANCH="release/$ENV/$TAG"
            echo "Creating branch $BRANCH from release tag $TAG"
            git checkout -b $BRANCH $TAG

            echo "Pushing branch $BRANCH to GitHub"
            git push https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }} $BRANCH
          else
            # workflow_dispatch
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              TAG="$REF"
              BRANCH="release/$ENV/$TAG"
              echo "Creating branch $BRANCH from tag $TAG"
              git checkout -b $BRANCH $TAG

              echo "Pushing branch $BRANCH to GitHub"
              git push https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }} $BRANCH
            else
              BRANCH="$REF"
              echo "Using branch $BRANCH directly"
              git checkout $BRANCH
            fi
          fi

          # Check if Amplify branch exists
          if aws amplify get-branch --app-id $APP_ID --branch-name $BRANCH >/dev/null 2>&1; then
            echo "Amplify branch $BRANCH already exists. Skipping creation."
          else
            echo "Creating Amplify branch $BRANCH"
            aws amplify create-branch --app-id $APP_ID --branch-name $BRANCH --enable-auto-build false
          fi

          # Wait for Amplify to detect the branch
          echo "Waiting for Amplify to detect branch $BRANCH..."
          until aws amplify get-branch --app-id $APP_ID --branch-name $BRANCH >/dev/null 2>&1; do
            sleep 5
          done
          echo "Amplify detected branch $BRANCH"

          echo "Starting Amplify job for branch $BRANCH"
          JOB_ID=$(aws amplify start-job --app-id $APP_ID --branch-name $BRANCH --job-type RELEASE --output json | jq -r .jobSummary.jobId)
          echo "Job started with ID: $JOB_ID"

          echo "Waiting for job to complete..."
          while true; do
            STATUS=$(aws amplify get-job --app-id $APP_ID --branch-name $BRANCH --job-id $JOB_ID --output json | jq -r .job.summary.status)
            echo "Current job status: $STATUS"
            if [[ "$STATUS" == "SUCCEED" ]]; then
              break
            elif [[ "$STATUS" == "FAILED" || "$STATUS" == "CANCELLED" ]]; then
              echo "Job failed or was cancelled. See Amplify console for details."
              exit 1
            fi
            sleep 30
          done
          echo "Job completed successfully."
