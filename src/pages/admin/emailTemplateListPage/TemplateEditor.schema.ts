import type { EmailTemplateId } from '../../../types'

export const defaultSchema = {
  cancelReason: 'string',
  delayedPayment: 'boolean',
  dogBreed: 'string',
  event: {
    classes: [
      {
        class: 'string',
        date: 'Date',
        entries: 'number',
        judge: [{ id: 'string', name: 'string' }],
        members: 'number',
        places: 'number',
        state: 'string',
      },
    ],
    contactInfo: {
      official: { email: 'string', name: 'string', phone: 'string' },
      secretary: { email: 'string', name: 'string', phone: 'string' },
    },
    cost: 'number',
    costMember: 'number',
    description: 'string',
    endDate: 'Date',
    entries: 'number',
    entryEndDate: 'Date',
    entryStartDate: 'Date',
    eventType: 'string',
    invitationAttachment: 'string',
    judges: [{ id: 'string', name: 'string' }],
    location: 'string',
    name: 'string',
    official: { id: 'string', name: 'string' },
    organizer: { id: 'string', name: 'string' },
    places: 'number',
    secretary: { id: 'string', name: 'string' },
    startDate: 'Date',
    state: 'string',
  },
  eventDate: 'string',
  groupDate: 'string',
  groupNumber: 'string',
  groupTime: 'string',
  invitationLink: 'string',
  link: 'string',
  origin: 'string',
  paymentLink: 'string',
  qualifyingResults: [
    {
      type: 'string',
      class: 'string',
      date: 'string',
      location: 'string',
      result: 'string',
      judge: 'string',
      subType: 'string',
      points: 'number',
      rank: 'number',
      ext: 'string',
      notes: 'string',
      cert: 'boolean',
      resCert: 'boolean',
      cacit: 'boolean',
      resCacit: 'boolean',
      official: 'boolean',
      qualifying: 'boolean',
    },
  ],
  reg: {
    agreeToTerms: 'boolean',
    breeder: { name: 'string' },
    cancelled: 'boolean',
    class: 'string',
    confirmed: 'boolean',
    dates: [{ date: 'Date', time: 'string' }],
    dog: {
      regNo: 'string',
      name: 'string',
      titles: 'string',
      callingName: 'string',
      rfid: 'string',
      kcId: 'number',
      breedCode: 'number',
      dob: 'string',
      gender: 'string',
      refreshDate: 'string',
      results: [
        {
          type: 'string',
          class: 'string',
          date: 'string',
          location: 'string',
          result: 'string',
          judge: 'string',
          subType: 'string',
          points: 'number',
          rank: 'number',
          ext: 'string',
          notes: 'string',
          cert: 'boolean',
          resCert: 'boolean',
          cacit: 'boolean',
          resCacit: 'boolean',
        },
      ],
      sire: { name: 'string', titles: 'string' },
      dam: { name: 'string', titles: 'string' },
    },
    eventId: 'string',
    eventType: 'string',
    handler: { email: 'string', name: 'string', phone: 'string', location: 'string', membership: 'boolean' },
    id: 'string',
    language: 'string',
    notes: 'string',
    owner: { email: 'string', name: 'string', phone: 'string', location: 'string', membership: 'boolean' },
    ownerHandles: 'boolean',
    paidAt: 'Date',
    payer: { name: 'string' },
    reserve: 'string',
  },
  regDates: 'string',
  reserveText: 'string',
  subject: 'string',
  text: 'string',
  title: 'string',
}

const transactionSchema = {
  transactionId: 'string',
  reference: 'string',
  type: 'string',
  stamp: 'string',
  amount: 'number',
  // items: PaymentItem[] | RefundItem[]
  status: 'string',
  bankReference: 'string',
  provider: 'string',
  createdAt: 'string',
  statusAt: 'string',
  user: 'string',
}

export const templateSchema: Partial<Record<EmailTemplateId, object>> = {
  access: {
    user: {
      firstName: 'string',
      email: 'string',
    },
    link: 'string',
    orgName: 'string',
    roleName: 'string',
    admin: 'boolean',
    secretary: 'boolean',
  },
  receipt: {
    ...defaultSchema,
    ...transactionSchema,
    createdAt: 'string',
    registrationCostName: 'string',
    registrationCost: 'string',
    optionalCosts: 'string',
    amount: 'string',
    previouslyPaid: 'string',
    totalPaid: 'string',
  },
  refund: {
    ...defaultSchema,
    type: 'refund',
    // items: RefundItem[],
    user: 'string',
    refundAmount: 'number',
    refundAt: 'string',
    refundStatus: 'string',
    createdAt: 'string',
    paidAmount: 'string',
    amount: 'string',
    handlingCost: 'string',
    providerName: 'string',
  },
}
