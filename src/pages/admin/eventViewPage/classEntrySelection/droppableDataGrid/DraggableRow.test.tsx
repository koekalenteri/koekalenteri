/* eslint-disable @typescript-eslint/no-unused-vars */
import type { ForwardedRef } from 'react'

import { DndProvider } from 'react-dnd'
import { HTML5Backend } from 'react-dnd-html5-backend'
import { render, screen } from '@testing-library/react'

import DraggableRow from './DraggableRow'

jest.mock('@mui/x-data-grid', () => {
  const React = jest.requireActual('react')
  return {
    GridRow: React.forwardRef(
      (
        {
          children,
          rowId,
          rowHeight,
          offsetLeft,
          columnsTotalWidth,
          visibleColumns,
          renderedColumns,
          firstColumnToRender,
          lastColumnToRender,
          rowIndex,
          cellFocus,
          cellTabIndex,
          editRowsState,
          isLastVisible,
          tabbableCell,
          firstColumnIndex,
          lastColumnIndex,
          pinnedColumns,
          focusedColumnIndex,
          isFirstVisible,
          isNotVisible,
          showBottomBorder,
          scrollbarWidth,
          gridHasFiller,
          ...props
        }: any,
        ref: ForwardedRef<any>
      ) => (
        <div data-testid="grid-row" ref={ref} {...props}>
          {children}
        </div>
      )
    ),
  }
})

jest.mock('./position', () => ({
  determinePosition: jest.fn().mockReturnValue('before'),
}))

describe('DraggableRow', () => {
  const renderWithDnd = (ui: React.ReactElement) => {
    return render(<DndProvider backend={HTML5Backend}>{ui}</DndProvider>)
  }

  // Create base props required by GridRowProps
  const baseProps = {
    rowId: 'test-id',
    index: 0,
    row: { dropGroups: ['group1'] },
    groupKey: 'group1',
    selected: false,
    rowHeight: 40,
    offsetLeft: 0,
    columnsTotalWidth: 1000,
    visibleColumns: [],
    renderedColumns: [],
    firstColumnToRender: 0,
    lastColumnToRender: 10,
    id: 'test-id',
    rowIndex: 0,
    cellFocus: false,
    cellTabIndex: -1,
    editRowsState: {},
    isLastVisible: false,
    position: 'center',
    tabbableCell: null,
    firstColumnIndex: 0,
    lastColumnIndex: 0,
    pinnedColumns: { left: [], right: [] },
    focusedColumnIndex: undefined,
    isFirstVisible: false,
    isNotVisible: false,
    showBottomBorder: false,
    scrollbarWidth: 0,
    gridHasFiller: false,
  }

  it('should render GridRow with correct props', () => {
    renderWithDnd(<DraggableRow {...baseProps} />)

    const gridRow = screen.getByTestId('grid-row')
    expect(gridRow).toBeInTheDocument()
    expect(gridRow).toHaveStyle('opacity: 1') // Not dragging, so opacity should be 1
  })

  it('should apply className when hovered', () => {
    // This is difficult to test directly because it requires simulating
    // the drag and drop behavior, which is challenging in a unit test.
    // We would need to mock the useDrop hook's return value.

    // For now, we'll just verify that the component renders without errors
    renderWithDnd(<DraggableRow {...baseProps} />)

    expect(screen.getByTestId('grid-row')).toBeInTheDocument()
  })

  it('should pass data-handler-id to GridRow', () => {
    renderWithDnd(<DraggableRow {...baseProps} />)

    // The handler ID is generated by react-dnd, so we can't know its exact value
    // We just check that the attribute exists
    const gridRow = screen.getByTestId('grid-row')
    expect(gridRow).toHaveAttribute('data-handler-id')
  })

  it('should pass all props to GridRow', () => {
    const testProps = {
      ...baseProps,
      rowId: 'test-id',
      index: 0,
      row: { dropGroups: ['group1'] },
      groupKey: 'group1',
      'aria-label': 'Test Row',
    }

    renderWithDnd(<DraggableRow {...testProps} />)

    const gridRow = screen.getByTestId('grid-row')
    expect(gridRow).toHaveAttribute('aria-label', 'Test Row')
  })
})
